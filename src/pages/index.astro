---
import { Image } from "astro:assets";

import Selfie from "../static/selfie.jpg";

import Layout from "../layouts/Layout.astro";

import LinkedInIcon from "../components/icons/LinkedInIcon.astro";
import GitHubIcon from "../components/icons/GitHubIcon.astro";
import TwitchIcon from "../components/icons/TwitchIcon.astro";
import InstagramIcon from "../components/icons/InstagramIcon.astro";

import CircleIcon from "../components/icons/CircleIcon.astro";
import RectangleIcon from "../components/icons/RectangleIcon.astro";
import SquareIcon from "../components/icons/SquareIcon.astro";
import StarIcon from "../components/icons/StarIcon.astro";
import TriangleIcon from "../components/icons/TriangleIcon.astro";
import XIcon from "../components/icons/XIcon.astro";

import About from "../components/About/index.astro"
import Projects from "../components/Projects/index.astro"
---

<Layout
    title="Devguerreiro's Portfolio"
    description="Welcome to my personal website"
>
    <div
        id="content"
        class="mt-32 mb-40 lg:mb-0 flex flex-col items-center lg:flex-row lg:justify-between xl:justify-around xl:gap-16"
    >
        <div
            id="greeting"
            class="relative md:w-2/3 lg:w-2/5 xl:w-1/3 2xl:w-1/4"
        >
            <div id="introduction" class="text-light_text dark:text-dark_text">
                <h1 class="font-kelly_slab text-2xl lg:text-3xl">
                    <b>Whatsup</b>, ü§ô
                </h1>
                <h2
                    class="text-light_text dark:text-dark_text mt-4 font-baskerville text-lg lg:text-xl tracking-wider"
                >
                    I'm <i
                        class="px-2 py-1 tiny-shadow font-roboto text-dark_contrast dark:text-light_contrast bg-light_contrast dark:bg-dark_contrast"
                        >devguerreiro</i
                    > and I work as a <b
                        class="text-dark_contrast dark:text-light_contrast leading-loose"
                        >Software Engineer</b
                    >
                </h2>
                <button
                    id="crazy-handshake-button"
                    class="w-full mt-6 btn-primary font-kelly_slab tracking-wider animate-bounce disabled:animate-none"
                    disabled
                >
                    GimMe a CraZy HandShaKe ü§ù
                </button>
                <div
                    id="socials"
                    class="mt-10 w-full flex justify-between text-light_text dark:text-dark_text"
                >
                    <a
                        id="linkedin"
                        href="https://linkedin.com/in/devguerreiro"
                        target="_blank"
                    >
                        <LinkedInIcon class="social-icon" />
                    </a>
                    <a
                        id="github"
                        href="https://github.com/devguerreiro"
                        target="_blank"
                    >
                        <GitHubIcon class="social-icon" />
                    </a>
                    <a
                        id="twitch"
                        href="https://twitch.tv/devguerreiro"
                        target="_blank"
                    >
                        <TwitchIcon class="social-icon" />
                    </a>
                    <a
                        id="instagram"
                        href="https://instagram.com/devguerreiro"
                        target="_blank"
                    >
                        <InstagramIcon class="social-icon" />
                    </a>
                </div>
            </div>
            <div class="bg-details">
                <TriangleIcon class="absolute -top-12 left-0 -z-10" size={35} />
                <StarIcon class="absolute -top-16 right-32 -z-10" size={30} />
                <CircleIcon class="absolute top-0 right-0 -z-10" size={40} />
            </div>
        </div>
        <div
            id="selfie"
            class="w-80 2xl:w-96 h-60 xl:h-72 relative mt-24 lg:mt-0 p-2 border-2 border-primary rounded-md flex justify-center"
        >
            <Image class="object-cover" src={Selfie} alt="A selfie of me" />
            <div class="bg-details">
                <SquareIcon class="absolute -top-6 right-0 -z-10" size={50} />
                <XIcon class="absolute -bottom-8 -left-8 -z-10" size={75} />
                <RectangleIcon
                    class="absolute -bottom-8 right-0 -z-10"
                    width={120}
                    height={20}
                />
            </div>
        </div>
        <div class="mt-44">
            <About />
        </div>
        <div class="mt-48">
          <Projects/>
        </div>
    </div>
</Layout>

<script>
    const STORAGE_hasAlreadyCrazyHandshaked = "hasAlreadyCrazyHandshaked";
    const STORAGE_hasAlreadyVisited = "hasAlreadyVisited";
    const STORAGE_handshakeGIF = "handshakeGIF";

    setupCrazyHandshake();
    checkNewVisitor();

    function setupCrazyHandshake() {
        const swapImageForGIF = (gif: { dims: number[]; url: string }) => {
            const selfieImg = document.querySelector(
                "#selfie > img"
            ) as HTMLElement;

            const gifWidth = gif.dims[0] + "px";
            const gifHeight = gif.dims[1] + "px";

            selfieImg.setAttribute("src", gif.url);
            selfieImg.setAttribute("width", gifWidth);
            selfieImg.setAttribute("height", gifHeight);
        };

        const hasAlreadyCrazyHandshaked = localStorage.getItem(
            STORAGE_hasAlreadyCrazyHandshaked
        );
        if (hasAlreadyCrazyHandshaked === null) {
            const hiddeImage = () => {
                const selfieImg = document.querySelector(
                    "#selfie > img"
                ) as HTMLElement;
                selfieImg.classList.add("hidden");
            };

            const showImage = () => {
                const selfieImg = document.querySelector(
                    "#selfie > img"
                ) as HTMLElement;
                selfieImg.classList.remove("hidden");
            };

            const showMessage = (text: string) => {
                const selfie = document.querySelector("#selfie") as HTMLElement;
                let message = selfie.querySelector(
                    "#message"
                ) as HTMLParagraphElement;
                if (message === null) {
                    let message = document.createElement("p");
                    message.setAttribute("id", "message");
                    message.innerText = text;
                    message.classList.add("text-primary");
                    selfie.appendChild(message);
                } else {
                    message.innerText = text;
                }
            };

            const removeMessage = () => {
                const selfie = document.querySelector("#selfie") as HTMLElement;
                const message = selfie.querySelector("#message");
                if (message !== null) {
                    selfie.removeChild(message);
                }
            };

            const showSearchingMessage = () =>
                showMessage("Searching the best GIF for you...");

            const showErrorMessage = () => showMessage("Some error occurred ");

            const showGIF = async () => {
                const baseUrl = "https://tenor.googleapis.com/v2/search?";
                const params = {
                    q: "crazy handshake",
                    key: import.meta.env.PUBLIC_TENOR_API_KEY,
                    client_key: import.meta.env.PUBLIC_TENOR_API_CLIENT_ID,
                    limit: "1",
                    random: "true",
                };

                hiddeImage();
                showSearchingMessage();

                const response = await fetch(
                    baseUrl + new URLSearchParams(params),
                    {
                        method: "GET",
                    }
                );
                if (response.status == 200) {
                    const data = await response.json();
                    const gif = data.results[0].media_formats.mediumgif;

                    swapImageForGIF(gif);

                    return new Promise<void>((resolve) => {
                        setTimeout(() => {
                            removeMessage(); // searching message
                            showImage(); // GIF image
                            showThanks();
                            localStorage.setItem(
                                STORAGE_handshakeGIF,
                                JSON.stringify(gif)
                            );
                            resolve();
                        }, 1000);
                    });
                }
                return new Promise<void>((resolve) => {
                    setTimeout(() => {
                        showErrorMessage();
                        setTimeout(() => {
                            removeMessage(); // error message
                            showImage(); // self image
                            resolve();
                        }, 1000);
                    }, 1000);
                });
            };

            const showThanks = () => {
                const selfie = document.querySelector("#selfie") as HTMLElement;
                const thanks = document.createElement("h2");
                thanks.classList.add(
                    "absolute",
                    "-top-10",
                    "text-primary",
                    "font-kelly_slab",
                    "font-bold",
                    "uppercase"
                );
                thanks.innerText = "Yoh! Thanks! ü´Ç";
                selfie.appendChild(thanks);
            };

            const commitHandShake = async () => {
                const response = await fetch(
                    `https://api.api-ninjas.com/v1/counter?id=handshakes&hit=true`,
                    {
                        method: "GET",
                        headers: {
                            "X-Api-Key": import.meta.env
                                .PUBLIC_API_NINJA_API_KEY,
                        },
                    }
                );
                if (response.status === 200) {
                    localStorage.setItem(
                        STORAGE_hasAlreadyCrazyHandshaked,
                        "true"
                    );
                    console.log(
                        "Yeah! Nice handshake! Welcome to the group of crazy handshakers :D"
                    );
                }
            };

            const crazyHandshakeButton = document.querySelector(
                "#crazy-handshake-button"
            );
            if (crazyHandshakeButton !== null) {
                crazyHandshakeButton.removeAttribute("disabled");
                crazyHandshakeButton.addEventListener(
                    "click",
                    async (e) => {
                        e.stopPropagation();
                        (e.target as Element).setAttribute(
                            "disabled",
                            "disabled"
                        );
                        Promise.all([showGIF(), commitHandShake()]);
                    },
                    { once: true }
                );
            }
        } else {
            const crazyHandshakeButton = document.querySelector(
                "#crazy-handshake-button"
            );
            if (crazyHandshakeButton !== null) {
                crazyHandshakeButton.innerHTML = "Yoh! Thanks for your ü§ù";
            }
            const gif = localStorage.getItem(STORAGE_handshakeGIF);
            if (gif) {
                swapImageForGIF(JSON.parse(gif));
            }
        }
    }

    function checkNewVisitor() {
        if (localStorage.getItem(STORAGE_hasAlreadyVisited) === null) {
            fetch(`https://api.api-ninjas.com/v1/counter?id=visits&hit=true`, {
                method: "GET",
                headers: {
                    "X-Api-Key": import.meta.env.PUBLIC_API_NINJA_API_KEY,
                },
            }).then((response) => {
                if (response.status === 200) {
                    localStorage.setItem(STORAGE_hasAlreadyVisited, "true");
                    console.log("Whatsup! Welcome to my personal website!");
                } else {
                    console.log("Whoops! Come back later!");
                }
            });
        }
    }
</script>
